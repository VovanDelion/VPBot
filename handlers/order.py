import asyncio
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.inline import confirm_order_keyboard, rating_keyboard
from keyboards.reply import request_phone_keyboard, request_location_keyboard, main_menu_keyboard
from loader import db
from utils.helpers import format_order

router = Router()


class OrderProcess(StatesGroup):
    ChooseDelivery = State()
    EnterAddress = State()
    EnterPhone = State()


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cart_items = await db.get_cart_items(message.from_user.id)

    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"

    for item in cart_items:
        cart_text += f"{item['name']} - {item['quantity']} x {item['price']} —Ä—É–±. = {item['quantity'] * item['price']} —Ä—É–±.\n"
        total += item['quantity'] * item['price']

    cart_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="clear_cart"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="edit_cart"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data="checkout"
        )
    )

    await message.answer(
        cart_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await db.clear_cart(call.from_user.id)
    await call.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await call.answer()


@router.callback_query(F.data == "edit_cart")
async def edit_cart(call: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart_items = await db.get_cart_items(call.from_user.id)

    if not cart_items:
        await call.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    builder = InlineKeyboardBuilder()
    for item in cart_items:
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']}",
                callback_data=f"remove_{item['id']}"
            )
        )

    builder.row(
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_cart"
        )
    )

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await call.answer()


@router.callback_query(F.data.startswith("remove_"))
async def remove_item(call: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    item_id = int(call.data.split("_")[1])
    await db.remove_from_cart(call.from_user.id, item_id)
    await call.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await edit_cart(call)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é


@router.callback_query(F.data == "back_to_cart")
async def back_to_cart(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ—Ä–∑–∏–Ω—ã"""
    await show_cart(call.message)
    await call.answer()


@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_user_orders(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    orders = await db.get_user_orders(message.from_user.id)

    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return

    orders_text = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"

    for order in orders:
        status_emoji = {
            'new': 'üÜï',
            'processing': 'üîÑ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order['status'].lower(), '‚ùì')

        orders_text += (
            f"{status_emoji} –ó–∞–∫–∞–∑ #{order['id']}\n"
            f"üìÖ {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üí∞ –°—É–º–º–∞: {order['total']} —Ä—É–±.\n"
            f"üöö {order['delivery_type']}\n"
            f"üì¶ {len(order['items'])} –ø–æ–∑–∏—Ü–∏–π\n\n"
        )

    await message.answer(orders_text)


@router.callback_query(F.data == "checkout")
async def start_checkout(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    cart_items = await db.get_cart_items(call.from_user.id)

    if not cart_items:
        await call.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üöó –°–∞–º–æ–≤—ã–≤–æ–∑",
            callback_data="delivery_pickup"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üöö –î–æ—Å—Ç–∞–≤–∫–∞",
            callback_data="delivery_delivery"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_cart"
        )
    )

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=builder.as_markup()
    )

    await state.set_state(OrderProcess.ChooseDelivery)


@router.callback_query(F.data.startswith("delivery_"))
async def process_delivery_choice(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_type = call.data.split("_")[1]
    await state.update_data(delivery_type=delivery_type)

    if delivery_type == "delivery":
        user_data = await db.get_user(call.from_user.id)

        location_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                    callback_data="send_location"
                )],
                [InlineKeyboardButton(
                    text="üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é",
                    callback_data="enter_address_manually"
                )],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="checkout"
                )]
            ]
        )

        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:",
            reply_markup=location_keyboard
        )
    else:
        await call.message.edit_text(
            "–°–∞–º–æ–≤—ã–≤–æ–∑ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü–∏—Ç–æ–Ω–æ–≤–∞, 42\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00 - 22:00\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=request_phone_keyboard()
        )
        await state.set_state(OrderProcess.EnterPhone)


@router.callback_query(F.data == "send_location")
async def request_location(call: types.CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await call.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=request_location_keyboard()
    )
    await call.answer()


@router.callback_query(F.data == "enter_address_manually")
async def request_manual_address(call: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é"""
    await call.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:"
    )
    await state.set_state(OrderProcess.EnterAddress)
    await call.answer()


@router.message(F.content_type == "location")
async def handle_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    address = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}"

    await state.update_data(address=address)
    await message.answer(
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {address}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=request_phone_keyboard()
    )
    await state.set_state(OrderProcess.EnterPhone)


@router.message(OrderProcess.EnterAddress)
async def handle_manual_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é"""
    await state.update_data(address=message.text)
    await message.answer(
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=request_phone_keyboard()
    )
    await state.set_state(OrderProcess.EnterPhone)


@router.message(F.content_type == "contact", OrderProcess.EnterPhone)
async def process_phone(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)

    data = await state.get_data()
    cart_items = await db.get_cart_items(message.from_user.id)

    total = sum(item["price"] * item["quantity"] for item in cart_items)

    if "promo_code" in data:
        discount = data["promo_discount"]
        total = total * (1 - discount)

    order_id = await db.create_order(
        user_id=message.from_user.id,
        total_amount=total,
        delivery_type=data["delivery_type"],
        address=data.get("address", "–°–∞–º–æ–≤—ã–≤–æ–∑"),
        phone_number=phone_number,
    )

    await db.add_order_items(order_id, cart_items)
    await db.clear_cart(message.from_user.id)

    order_details = await db.get_order_details(order_id)
    order_text = format_order(order_details)

    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"{order_text}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=main_menu_keyboard()
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å
    await asyncio.sleep(3600)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:",
        reply_markup=rating_keyboard(order_id)
    )

    await state.clear()


def register_order_handlers(dp):
    dp.include_router(router)
