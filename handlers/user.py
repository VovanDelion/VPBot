from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from loader import db, bot
from states import UserRegistration
from keyboards.reply import request_phone_keyboard, main_menu_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)

    if not user:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '–í–∫—É—Å –ø–∏—Ç–æ–Ω–∞'!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=request_phone_keyboard()
        )
        await state.set_state(UserRegistration.Phone)
    else:
        await message.answer(
            f"üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[2] or message.from_user.full_name}!\n",
            reply_markup=main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.contact, UserRegistration.Phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number

    if phone_number.startswith('+'):
        normalized_phone = '+' + ''.join(c for c in phone_number[1:] if c.isdigit())
    else:
        normalized_phone = ''.join(c for c in phone_number if c.isdigit())

    await state.update_data(phone_number=normalized_phone)

    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(UserRegistration.Name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
@router.message(UserRegistration.Name)
async def process_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.text,
        phone=data['phone_number']
    )

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {message.text}!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command('help'))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é\n"
        "/cart - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@router.message(Command('profile'))
async def cmd_profile(message: types.Message):
    user = await db.get_user(message.from_user.id)

    if user:
        text = f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        text += f"üÜî ID: {user[0]}\n"
        text += f"üë§ –ò–º—è: {user[2]}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[4]}"

        await message.answer(text)
    else:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start",
            reply_markup=types.ReplyKeyboardRemove()
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_user_handlers(dp):
    dp.include_router(router)