from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.inline import admin_menu_keyboard, edit_keyboard
from loader import db
from data.config import ADMIN_IDS
from states import AdminActions
from utils.helpers import is_admin

router = Router()


class AdminActions(StatesGroup):
    AddDishName = State()
    AddDishDescription = State()
    AddDishPrice = State()
    AddDishCategory = State()
    AddCategoryName = State()
    EditDishSelect = State()
    EditDishName = State()
    EditDishDescription = State()
    EditDishPrice = State()
    EditDishCategory = State()


@router.message(Command("admin"))
async def show_admin_menu(message: types.Message):
    user = await db.get_user(message.from_user.id)

    if user[0] in ADMIN_IDS:
        await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard())
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")


@router.callback_query(
    F.from_user.func(lambda user: is_admin(user.id)), F.data == "admin_view_stats"
)
async def view_stats(call: types.CallbackQuery):
    stats = await db.get_admin_stats()

    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_order']:.2f} —Ä—É–±.\n"
        f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_revenue']:.2f} —Ä—É–±.\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
        f"{stats['recent_orders']}"
    )

    await call.message.edit_text(text, reply_markup=admin_menu_keyboard())


@router.callback_query(
    F.from_user.func(lambda user: is_admin(user.id)), F.data == "admin_add_dish"
)
async def add_dish_start(call: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:", reply_markup=keyboard)
    await state.set_state(AdminActions.AddDishName)


@router.message(
    F.from_user.func(lambda user: is_admin(user.id)), AdminActions.AddDishName
)
async def add_dish_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    await state.set_state(AdminActions.AddDishDescription)


@router.message(
    F.from_user.func(lambda user: is_admin(user.id)), AdminActions.AddDishDescription
)
async def add_dish_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AdminActions.AddDishPrice)


@router.message(
    F.from_user.func(lambda user: is_admin(user.id)), AdminActions.AddDishPrice
)
async def add_dish_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)

        categories = await db.get_all_categories()
        if not categories:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(
                text=category["name"],
                callback_data=f'admin_category_{category["category_id"]}',
            )

        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")

        builder.adjust(2, 1)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª—é–¥–∞:", reply_markup=builder.as_markup()
        )
        await state.set_state(AdminActions.AddDishCategory)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")


@router.callback_query(
    F.from_user.func(lambda user: is_admin(user.id)),
    F.data.startswith("admin_category_"),
    AdminActions.AddDishCategory,
)
async def add_dish_category(call: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(call.data.split("_")[2])
        data = await state.get_data()

        success = await db.add_dish(
            name=data["name"],
            description=data["description"],
            price=data["price"],
            category_id=category_id,
        )

        if success:
            await call.message.edit_text(
                "‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–Ω—é!", reply_markup=admin_menu_keyboard()
            )
        else:
            await call.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", reply_markup=admin_menu_keyboard()
            )
    finally:
        await state.clear()


@router.callback_query(F.data == "admin_view_stats")
async def view_stats(call: types.CallbackQuery):
    stats = await db.get_admin_stats()
    await call.message.edit_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_order']:.2f} —Ä—É–±.\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥: {stats['total_revenue']:.2f} —Ä—É–±.\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:\n{stats['recent_orders']}",
        reply_markup=admin_menu_keyboard(),
    )


@router.callback_query(F.data == "admin_manage_menu")
async def manage_menu(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="admin_add_dish"),
        InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ", callback_data="admin_edit_dish"
        ),
    )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    await call.message.edit_text(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "admin_manage_orders")
async def manage_orders(call: types.CallbackQuery):
    orders = await db.get_recent_orders(5)

    builder = InlineKeyboardBuilder()
    for order in orders:
        builder.row(
            InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ #{order['id']} - {order['status']}",
                callback_data=f"admin_order_{order['id']}",
            )
        )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
    text += "\n".join(
        [f"#{o['id']} - {o['status']} - {o['total']} —Ä—É–±." for o in orders]
    )

    await call.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "admin_manage_users")
async def manage_users(call: types.CallbackQuery):
    users = await db.get_recent_users(5)

    builder = InlineKeyboardBuilder()
    for user in users:
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {user['full_name']}", callback_data=f"admin_user_{user['id']}"
            )
        )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    text += "\n".join([f"{u['full_name']} - {u['registration_date']}" for u in users])

    await call.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "admin_manage_categories")
async def manage_categories(call: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    categories = await db.get_all_categories()

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category"
        ),
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_delete_category"
        ),
    )

    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÅ {category['name']}",
                callback_data=f"admin_view_category_{category['category_id']}",
            )
        )

    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    text = "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:\n"
    if categories:
        text += "\n".join([f"- {c['name']}" for c in categories])
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

    if hasattr(call, "message") and call.message:
        await call.message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await call.answer(text)


@router.callback_query(F.data == "admin_add_category")
async def add_category_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_categories"
                    )
                ]
            ]
        ),
    )
    await state.set_state(AdminActions.AddCategoryName)


@router.message(AdminActions.AddCategoryName)
async def add_category_name(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()
    if len(category_name) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    success = await db.add_category(category_name)
    if success:
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )

    await state.clear()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data="admin_manage_categories",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë®‚Äçüíª –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back"
                )
            ],
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("admin_view_category_"))
async def view_category(call: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split("_")[3])
    category = await db.get_category(category_id)
    dishes = await db.get_dishes_by_category(category_id)

    text = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}\n\n"
    text += "üçΩ –ë–ª—é–¥–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
    text += "\n".join([f"- {d['name']} ({d['price']} —Ä—É–±.)" for d in dishes])

    await call.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_categories"
                    )
                ]
            ]
        ),
    )


@router.callback_query(F.data == "admin_delete_category")
async def delete_category_start(call: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await db.get_all_categories()

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üóë {category['name']}",
                callback_data=f"admin_confirm_delete_category_{category['category_id']}",
            )
        )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_categories")
    )

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("admin_confirm_delete_category_"))
async def confirm_delete_category(call: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split("_")[4])
    category = await db.get_category(category_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞",
                    callback_data=f"admin_do_delete_category_{category_id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç", callback_data="admin_manage_categories"
                ),
            ]
        ]
    )

    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category['name']}'?",
        reply_markup=keyboard,
    )


@router.callback_query(F.data.startswith("admin_do_delete_category_"))
async def do_delete_category(call: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split("_")[4])
    success = await db.delete_category(category_id)

    if success:
        await call.message.edit_text(
            "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_categories"
                        )
                    ]
                ]
            ),
        )
    else:
        await call.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–ª—é–¥–∞—Ö.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_categories"
                        )
                    ]
                ]
            ),
        )


@router.callback_query(F.data == "admin_edit_dish")
async def edit_dish_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞ - –≤—ã–±–æ—Ä –±–ª—é–¥–∞"""
    try:
        dishes = await db.get_all_dishes()

        if not dishes:
            await call.message.edit_text(
                "–ù–µ—Ç –±–ª—é–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=admin_menu_keyboard()
            )
            return

        if not isinstance(dishes, list) or not all(isinstance(d, dict) for d in dishes):
            raise ValueError("Invalid dishes data format")

        builder = InlineKeyboardBuilder()
        for dish in dishes:
            if not all(key in dish for key in ["dish_id", "name", "price"]):
                continue

            builder.button(
                text=f"{dish['name']} ({dish['price']} —Ä—É–±.)",
                callback_data=f"admin_edit_select_{dish['dish_id']}",
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        builder.adjust(1)

        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=builder.as_markup()
        )
        await state.set_state(AdminActions.EditDishSelect)

    except Exception as e:
        await call.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥: {str(e)}",
            reply_markup=admin_menu_keyboard(),
        )


@router.callback_query(
    F.data.startswith("admin_edit_select_"), AdminActions.EditDishSelect
)
async def edit_dish_select(call: types.CallbackQuery, state: FSMContext):
    dish_id = int(call.data.split("_")[3])
    dish = await db.get_dish_by_id(dish_id)

    if not dish:
        await call.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    await state.update_data(dish_id=dish_id)

    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –±–ª—é–¥–∞ {dish['name']}:",
        reply_markup=edit_keyboard(dish_id=dish_id),
    )


@router.callback_query(F.data == "admin_edit_name")
async def edit_dish_name_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    await state.set_state(AdminActions.EditDishName)


@router.message(AdminActions.EditDishName)
async def edit_dish_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    await db.update_dish(
        dish_id=data["dish_id"],
        name=message.text,
    )
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n" f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –±–ª—é–¥–∞:",
        reply_markup=edit_keyboard(dish_id=data["dish_id"]),
    )
    await state.set_state(AdminActions.EditDishSelect)


@router.callback_query(F.data == "admin_edit_description")
async def edit_dish_description_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    await state.set_state(AdminActions.EditDishDescription)


@router.message(AdminActions.EditDishDescription)
async def edit_dish_description(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()
    await db.update_dish(
        dish_id=data["dish_id"],
        description=message.text,
    )
    await message.answer(
        "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=edit_keyboard(dish_id=data["dish_id"]),
    )
    await state.set_state(AdminActions.EditDishSelect)


@router.callback_query(F.data == "admin_edit_price")
async def edit_dish_price_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã"""
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±–ª—é–¥–∞:")
    await state.set_state(AdminActions.EditDishPrice)


@router.message(AdminActions.EditDishPrice)
async def edit_dish_price(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        price = float(message.text)
        data = await state.get_data()
        await db.update_dish(
            dish_id=data["dish_id"],
            price=price,
        )
        await message.answer(
            "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=edit_keyboard(dish_id=data["dish_id"]),
        )
        await state.set_state(AdminActions.EditDishSelect)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")


@router.callback_query(F.data == "admin_edit_category")
async def edit_dish_category_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await db.get_all_categories()

    if not categories:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=category["name"],
            callback_data=f"admin_edit_category_select_{category['category_id']}",
        )
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(2, 1)

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª—é–¥–∞:", reply_markup=builder.as_markup()
    )
    await state.set_state(AdminActions.EditDishCategory)


@router.callback_query(
    F.data.startswith("admin_edit_category_select_"), AdminActions.EditDishCategory
)
async def edit_dish_category_select(call: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split("_")[4])
    data = await state.get_data()

    await db.update_dish(dish_id=data["dish_id"], category_id=category_id)

    category = await db.get_category(category_id)
    await call.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {category['name']}!",
        reply_markup=edit_keyboard(dish_id=data["dish_id"]),
    )
    await state.set_state(AdminActions.EditDishSelect)


@router.callback_query(F.data == "admin_view_feedback")
async def view_feedback(call: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        feedbacks = await db.get_all_feedback()

        if not feedbacks:
            await call.message.edit_text(
                "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", reply_markup=admin_menu_keyboard()
            )
            return

        text = "üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for fb in feedbacks:
            user = await db.get_user(fb["user_id"])
            username = user[1] if user and len(user) > 1 else "–ê–Ω–æ–Ω–∏–º"
            text += (
                f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: {fb['rating']}/5\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"üìÖ –î–∞—Ç–∞: {fb['created_at']}\n"
            )
            if fb["comment"]:
                text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {fb['comment']}\n"
            text += "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
        )

        await call.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        await call.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", reply_markup=admin_menu_keyboard()
        )


@router.callback_query(F.data.startswith("admin_delete_dish_"))
async def delete_dish_confirmation(call: types.CallbackQuery):
    dish_id = int(call.data.split("_")[3])
    dish = await db.get_dish_by_id(dish_id)

    if not dish:
        await call.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞", callback_data=f"admin_do_delete_dish_{dish_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç", callback_data=f"admin_edit_select_{dish_id}"
                ),
            ]
        ]
    )

    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ '{dish['name']}'?", reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("admin_do_delete_dish_"))
async def delete_dish_execute(call: types.CallbackQuery):
    dish_id = int(call.data.split("_")[4])
    success = await db.delete_dish(dish_id)

    if success:
        await call.message.edit_text(
            "‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=admin_menu_keyboard()
        )
    else:
        await call.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", reply_markup=admin_menu_keyboard()
        )


@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(call: types.CallbackQuery):
    await call.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard()
    )


def register_admin_handlers(dp):
    dp.include_router(router)
